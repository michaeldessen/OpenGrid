{"ast":null,"code":"var _jsxFileName = \"/Users/michael/michael/cronopio/projects/software-experiments/OpenGrid/OpenGrid/src/OpenGrid.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport './OpenGrid.css';\nexport default function OpenGrid() {\n  // State variables\n  const [playerNames, setPlayerNames] = useState(['Lisa', 'Rebecca', 'Michael', 'Willie', 'Shivangi', 'Chieh']);\n  const [newPlayerInput, setNewPlayerInput] = useState('');\n  const [columns, setColumns] = useState(8);\n  const [minPlayers, setMinPlayers] = useState(1);\n  const [maxAdditionalPlayers, setMaxAdditionalPlayers] = useState(1);\n  const [sliderPosition, setSliderPosition] = useState(-1);\n  const [sliderActive, setSliderActive] = useState(false);\n  const [sliderDuration, setSliderDuration] = useState(30);\n  const [generatedTable, setGeneratedTable] = useState([]);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [cellMode, setCellMode] = useState('cell'); // 'none' or 'cell'\n  const [settingsCollapsed, setSettingsCollapsed] = useState(false);\n  const [cueMode, setCueMode] = useState('none'); // 'none', 'player', or 'timed'\n  const [playerCues, setPlayerCues] = useState([]);\n  const sliderInterval = useRef(null);\n  const fileInputRef = useRef(null);\n\n  // Initialize table on first load\n  useEffect(() => {\n    generateEmptyTable();\n  }, [playerNames, columns]);\n\n  // Slider animation for timed cues\n  useEffect(() => {\n    if (sliderActive && cueMode === 'timed') {\n      sliderInterval.current = setInterval(() => {\n        setSliderPosition(prev => {\n          const newPos = prev + 1;\n          if (newPos >= columns) {\n            setSliderActive(false);\n            return -1;\n          }\n          return newPos;\n        });\n      }, sliderDuration * 1000 / columns);\n    } else if (!sliderActive && sliderInterval.current) {\n      clearInterval(sliderInterval.current);\n    }\n    return () => {\n      if (sliderInterval.current) clearInterval(sliderInterval.current);\n    };\n  }, [sliderActive, cueMode, columns, sliderDuration]);\n\n  // Update player cues when table changes\n  useEffect(() => {\n    if (cueMode === 'player') {\n      calculatePlayerCues();\n    } else {\n      setPlayerCues([]);\n    }\n  }, [generatedTable, cueMode]);\n\n  // Calculate which cells should have player cues\n  const calculatePlayerCues = () => {\n    const cues = [];\n\n    // Start from the third column (index 2)\n    for (let col = 2; col < columns; col++) {\n      const colChanges = [];\n      for (let row = 0; row < playerNames.length; row++) {\n        const currentState = generatedTable[row][col] ? true : false;\n        const previousState = generatedTable[row][col - 1] ? true : false;\n\n        // If player state changed (on to off, or off to on)\n        if (currentState !== previousState) {\n          colChanges.push(row);\n        }\n      }\n\n      // If there are changes, select one player to be the cue\n      if (colChanges.length > 0) {\n        // Randomly select one player who changed state\n        const randomIndex = Math.floor(Math.random() * colChanges.length);\n        cues.push({\n          col,\n          row: colChanges[randomIndex]\n        });\n      }\n    }\n    setPlayerCues(cues);\n  };\n\n  // Generate empty table\n  const generateEmptyTable = () => {\n    const newTable = playerNames.map(name => Array(columns).fill(''));\n    setGeneratedTable(newTable);\n  };\n\n  // Fill table with on/off states fairly distributed among players\n  const fillTable = () => {\n    const newTable = [...generatedTable];\n\n    // Track how many active cells each player has\n    const playerCellCounts = Array(playerNames.length).fill(0);\n    for (let col = 0; col < columns; col++) {\n      // Calculate how many players to assign in this column\n      const additionalPlayers = Math.floor(Math.random() * (maxAdditionalPlayers + 1));\n      const totalPlayers = Math.min(minPlayers + additionalPlayers, playerNames.length);\n\n      // Sort players by number of active cells (ascending) to prioritize players with fewer active states\n      const playerIndices = Array.from({\n        length: playerNames.length\n      }, (_, i) => i).sort((a, b) => playerCellCounts[a] - playerCellCounts[b]);\n\n      // Clear column first\n      for (let row = 0; row < playerNames.length; row++) {\n        newTable[row][col] = '';\n      }\n\n      // Assign active states to selected players (prioritizing those with fewer active states)\n      for (let i = 0; i < totalPlayers; i++) {\n        const playerIdx = playerIndices[i];\n        newTable[playerIdx][col] = 'on';\n        playerCellCounts[playerIdx]++;\n      }\n    }\n    setGeneratedTable(newTable);\n  };\n\n  // Handle player names from file\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const text = e.target.result;\n      const lines = text.split('\\n');\n      const names = lines.filter(line => line.trim()).map(line => {\n        const match = line.match(/\\d+,\\s*\\d+\\s+([^;]+);/);\n        return match ? match[1].trim() : null;\n      }).filter(Boolean);\n      if (names.length > 0) {\n        setPlayerNames(names);\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  // Handle manually adding players\n  const handleAddPlayers = () => {\n    if (!newPlayerInput.trim()) return;\n    const newPlayers = newPlayerInput.split(',').map(name => name.trim()).filter(name => name);\n    if (newPlayers.length > 0) {\n      setPlayerNames([...playerNames, ...newPlayers]);\n      setNewPlayerInput('');\n    }\n  };\n\n  // Handle removing a player\n  const removePlayer = index => {\n    const newPlayers = [...playerNames];\n    newPlayers.splice(index, 1);\n    setPlayerNames(newPlayers);\n  };\n\n  // Handle player reordering\n  const movePlayer = (index, direction) => {\n    if (direction === 'up' && index === 0 || direction === 'down' && index === playerNames.length - 1) {\n      return;\n    }\n    const newPlayers = [...playerNames];\n    const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n    // Swap positions\n    const temp = newPlayers[index];\n    newPlayers[index] = newPlayers[targetIndex];\n    newPlayers[targetIndex] = temp;\n    setPlayerNames(newPlayers);\n  };\n\n  // Toggle cell state\n  const toggleCell = (rowIdx, colIdx) => {\n    const newTable = [...generatedTable];\n    newTable[rowIdx][colIdx] = newTable[rowIdx][colIdx] ? '' : 'on';\n    setGeneratedTable(newTable);\n  };\n\n  // Clear all cells\n  const clearAllCells = () => {\n    generateEmptyTable();\n  };\n\n  // Start/reset slider for timed cues\n  const startSlider = () => {\n    setSliderPosition(0);\n    setSliderActive(true);\n  };\n\n  // Pause slider\n  const pauseSlider = () => {\n    setSliderActive(false);\n  };\n\n  // Reset slider\n  const resetSlider = () => {\n    setSliderPosition(-1);\n    setSliderActive(false);\n  };\n\n  // Check if a cell should display player cue\n  const shouldShowPlayerCue = (rowIdx, colIdx) => {\n    return cueMode === 'player' && playerCues.some(cue => cue.row === rowIdx && cue.col === colIdx);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-layout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `settings-panel ${settingsCollapsed ? 'collapsed' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setSettingsCollapsed(!settingsCollapsed),\n    className: \"toggle-button\",\n    \"aria-label\": settingsCollapsed ? \"Expand settings\" : \"Collapse settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }, settingsCollapsed ? '>' : '<'), !settingsCollapsed && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 17\n    }\n  }, \"Players\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 19\n    }\n  }, \"Add Players\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-with-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: newPlayerInput,\n    onChange: e => setNewPlayerInput(e.target.value),\n    placeholder: \"Names, separated by commas\",\n    className: \"text-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleAddPlayers,\n    className: \"add-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 21\n    }\n  }, \"Add\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 19\n    }\n  }, \"Player Names File\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".txt\",\n    onChange: handleFileUpload,\n    ref: fileInputRef,\n    className: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => fileInputRef.current.click(),\n    className: \"file-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 21\n    }\n  }, \"Open File\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setPlayerNames([]),\n    className: \"clear-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 21\n    }\n  }, \"Clear All\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 19\n    }\n  }, \"Current Players\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"player-list-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 19\n    }\n  }, playerNames.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"no-players\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 23\n    }\n  }, \"No players added\") : /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"player-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 23\n    }\n  }, playerNames.map((name, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    className: \"player-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"player-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 29\n    }\n  }, name), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"player-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => movePlayer(index, 'up'),\n    disabled: index === 0,\n    className: `move-button ${index === 0 ? 'disabled' : ''}`,\n    \"aria-label\": \"Move player up\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 31\n    }\n  }, \"\\u2191\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => movePlayer(index, 'down'),\n    disabled: index === playerNames.length - 1,\n    className: `move-button ${index === playerNames.length - 1 ? 'disabled' : ''}`,\n    \"aria-label\": \"Move player down\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 31\n    }\n  }, \"\\u2193\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => removePlayer(index),\n    className: \"remove-button\",\n    \"aria-label\": \"Remove player\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 31\n    }\n  }, \"\\xD7\")))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 17\n    }\n  }, \"Table Settings\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-2-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 21\n    }\n  }, \"Number of Columns\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    min: \"1\",\n    max: \"20\",\n    value: columns,\n    onChange: e => setColumns(parseInt(e.target.value) || 1),\n    className: \"number-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 21\n    }\n  }, \"Min Players per Column\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    min: \"0\",\n    max: playerNames.length,\n    value: minPlayers,\n    onChange: e => setMinPlayers(parseInt(e.target.value) || 0),\n    className: \"number-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 21\n    }\n  }, \"Max Additional Players\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    min: \"0\",\n    max: playerNames.length,\n    value: maxAdditionalPlayers,\n    onChange: e => setMaxAdditionalPlayers(parseInt(e.target.value) || 0),\n    className: \"number-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-group button-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fillTable,\n    className: \"fill-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 21\n    }\n  }, \"Fill Table\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 17\n    }\n  }, \"Timing Cues\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cue-mode-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setCueMode('none'),\n    className: `toggle-button ${cueMode === 'none' ? 'active' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 19\n    }\n  }, \"No cues\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setCueMode('player'),\n    className: `toggle-button ${cueMode === 'player' ? 'active' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 19\n    }\n  }, \"Player cues\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setCueMode('timed'),\n    className: `toggle-button ${cueMode === 'timed' ? 'active' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 19\n    }\n  }, \"Timed cues\")), cueMode === 'timed' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-group mt-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 23\n    }\n  }, \"Piece duration (seconds)\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    min: \"1\",\n    value: sliderDuration,\n    onChange: e => setSliderDuration(parseInt(e.target.value) || 30),\n    className: \"number-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-group mt-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startSlider,\n    className: \"start-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 23\n    }\n  }, \"Start\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: pauseSlider,\n    className: \"pause-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 23\n    }\n  }, \"Pause\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetSlider,\n    className: \"reset-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 23\n    }\n  }, \"Reset\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 17\n    }\n  }, \"Cell Mode\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setCellMode('none'),\n    className: `toggle-button ${cellMode === 'none' ? 'active' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 19\n    }\n  }, \"None\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setCellMode('cell'),\n    className: `toggle-button ${cellMode === 'cell' ? 'active' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 19\n    }\n  }, \"Cell\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearAllCells,\n    className: \"clear-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 19\n    }\n  }, \"Clear All\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `table-container ${settingsCollapsed ? 'full-width' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"main-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 11\n    }\n  }, \"OpenGrid\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"main-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    className: \"player-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 19\n    }\n  }, \"Players\"), Array.from({\n    length: columns\n  }, (_, i) => /*#__PURE__*/React.createElement(\"th\", {\n    key: i,\n    className: \"column-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 21\n    }\n  }, i + 1)))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 15\n    }\n  }, playerNames.map((name, rowIdx) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: rowIdx,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"player-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 21\n    }\n  }, name), Array.from({\n    length: columns\n  }, (_, colIdx) => {\n    var _generatedTable$rowId;\n    return /*#__PURE__*/React.createElement(\"td\", {\n      key: colIdx,\n      className: `\n                          grid-cell \n                          ${colIdx === sliderPosition && cueMode === 'timed' ? 'active-column' : ''}\n                          ${shouldShowPlayerCue(rowIdx, colIdx) ? 'player-cue' : ''}\n                        `,\n      onClick: () => cellMode === 'cell' ? toggleCell(rowIdx, colIdx) : null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 23\n      }\n    }, ((_generatedTable$rowId = generatedTable[rowIdx]) === null || _generatedTable$rowId === void 0 ? void 0 : _generatedTable$rowId[colIdx]) && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-on\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 27\n      }\n    }));\n  })))))))));\n}","map":{"version":3,"names":["React","useState","useEffect","useRef","OpenGrid","playerNames","setPlayerNames","newPlayerInput","setNewPlayerInput","columns","setColumns","minPlayers","setMinPlayers","maxAdditionalPlayers","setMaxAdditionalPlayers","sliderPosition","setSliderPosition","sliderActive","setSliderActive","sliderDuration","setSliderDuration","generatedTable","setGeneratedTable","selectedCell","setSelectedCell","cellMode","setCellMode","settingsCollapsed","setSettingsCollapsed","cueMode","setCueMode","playerCues","setPlayerCues","sliderInterval","fileInputRef","generateEmptyTable","current","setInterval","prev","newPos","clearInterval","calculatePlayerCues","cues","col","colChanges","row","length","currentState","previousState","push","randomIndex","Math","floor","random","newTable","map","name","Array","fill","fillTable","playerCellCounts","additionalPlayers","totalPlayers","min","playerIndices","from","_","i","sort","a","b","playerIdx","handleFileUpload","e","file","target","files","reader","FileReader","onload","text","result","lines","split","names","filter","line","trim","match","Boolean","readAsText","handleAddPlayers","newPlayers","removePlayer","index","splice","movePlayer","direction","targetIndex","temp","toggleCell","rowIdx","colIdx","clearAllCells","startSlider","pauseSlider","resetSlider","shouldShowPlayerCue","some","cue","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","placeholder","accept","ref","click","key","disabled","max","parseInt","Fragment","_generatedTable$rowId"],"sources":["/Users/michael/michael/cronopio/projects/software-experiments/OpenGrid/OpenGrid/src/OpenGrid.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './OpenGrid.css';\n\nexport default function OpenGrid() {\n  // State variables\n  const [playerNames, setPlayerNames] = useState(['Lisa', 'Rebecca', 'Michael', 'Willie', 'Shivangi', 'Chieh']);\n  const [newPlayerInput, setNewPlayerInput] = useState('');\n  const [columns, setColumns] = useState(8);\n  const [minPlayers, setMinPlayers] = useState(1);\n  const [maxAdditionalPlayers, setMaxAdditionalPlayers] = useState(1);\n  const [sliderPosition, setSliderPosition] = useState(-1);\n  const [sliderActive, setSliderActive] = useState(false);\n  const [sliderDuration, setSliderDuration] = useState(30);\n  const [generatedTable, setGeneratedTable] = useState([]);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [cellMode, setCellMode] = useState('cell'); // 'none' or 'cell'\n  const [settingsCollapsed, setSettingsCollapsed] = useState(false);\n  const [cueMode, setCueMode] = useState('none'); // 'none', 'player', or 'timed'\n  const [playerCues, setPlayerCues] = useState([]);\n  \n  const sliderInterval = useRef(null);\n  const fileInputRef = useRef(null);\n  \n  // Initialize table on first load\n  useEffect(() => {\n    generateEmptyTable();\n  }, [playerNames, columns]);\n  \n  // Slider animation for timed cues\n  useEffect(() => {\n    if (sliderActive && cueMode === 'timed') {\n      sliderInterval.current = setInterval(() => {\n        setSliderPosition(prev => {\n          const newPos = prev + 1;\n          if (newPos >= columns) {\n            setSliderActive(false);\n            return -1;\n          }\n          return newPos;\n        });\n      }, (sliderDuration * 1000) / columns);\n    } else if (!sliderActive && sliderInterval.current) {\n      clearInterval(sliderInterval.current);\n    }\n    \n    return () => {\n      if (sliderInterval.current) clearInterval(sliderInterval.current);\n    };\n  }, [sliderActive, cueMode, columns, sliderDuration]);\n  \n  // Update player cues when table changes\n  useEffect(() => {\n    if (cueMode === 'player') {\n      calculatePlayerCues();\n    } else {\n      setPlayerCues([]);\n    }\n  }, [generatedTable, cueMode]);\n  \n  // Calculate which cells should have player cues\n  const calculatePlayerCues = () => {\n    const cues = [];\n    \n    // Start from the third column (index 2)\n    for (let col = 2; col < columns; col++) {\n      const colChanges = [];\n      \n      for (let row = 0; row < playerNames.length; row++) {\n        const currentState = generatedTable[row][col] ? true : false;\n        const previousState = generatedTable[row][col-1] ? true : false;\n        \n        // If player state changed (on to off, or off to on)\n        if (currentState !== previousState) {\n          colChanges.push(row);\n        }\n      }\n      \n      // If there are changes, select one player to be the cue\n      if (colChanges.length > 0) {\n        // Randomly select one player who changed state\n        const randomIndex = Math.floor(Math.random() * colChanges.length);\n        cues.push({ col, row: colChanges[randomIndex] });\n      }\n    }\n    \n    setPlayerCues(cues);\n  };\n  \n  // Generate empty table\n  const generateEmptyTable = () => {\n    const newTable = playerNames.map(name => Array(columns).fill(''));\n    setGeneratedTable(newTable);\n  };\n  \n  // Fill table with on/off states fairly distributed among players\n  const fillTable = () => {\n    const newTable = [...generatedTable];\n    \n    // Track how many active cells each player has\n    const playerCellCounts = Array(playerNames.length).fill(0);\n    \n    for (let col = 0; col < columns; col++) {\n      // Calculate how many players to assign in this column\n      const additionalPlayers = Math.floor(Math.random() * (maxAdditionalPlayers + 1));\n      const totalPlayers = Math.min(minPlayers + additionalPlayers, playerNames.length);\n      \n      // Sort players by number of active cells (ascending) to prioritize players with fewer active states\n      const playerIndices = Array.from({ length: playerNames.length }, (_, i) => i)\n        .sort((a, b) => playerCellCounts[a] - playerCellCounts[b]);\n      \n      // Clear column first\n      for (let row = 0; row < playerNames.length; row++) {\n        newTable[row][col] = '';\n      }\n      \n      // Assign active states to selected players (prioritizing those with fewer active states)\n      for (let i = 0; i < totalPlayers; i++) {\n        const playerIdx = playerIndices[i];\n        newTable[playerIdx][col] = 'on';\n        playerCellCounts[playerIdx]++;\n      }\n    }\n    \n    setGeneratedTable(newTable);\n  };\n  \n  // Handle player names from file\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const text = e.target.result;\n      const lines = text.split('\\n');\n      const names = lines\n        .filter(line => line.trim())\n        .map(line => {\n          const match = line.match(/\\d+,\\s*\\d+\\s+([^;]+);/);\n          return match ? match[1].trim() : null;\n        })\n        .filter(Boolean);\n      \n      if (names.length > 0) {\n        setPlayerNames(names);\n      }\n    };\n    reader.readAsText(file);\n  };\n  \n  // Handle manually adding players\n  const handleAddPlayers = () => {\n    if (!newPlayerInput.trim()) return;\n    \n    const newPlayers = newPlayerInput\n      .split(',')\n      .map(name => name.trim())\n      .filter(name => name);\n    \n    if (newPlayers.length > 0) {\n      setPlayerNames([...playerNames, ...newPlayers]);\n      setNewPlayerInput('');\n    }\n  };\n  \n  // Handle removing a player\n  const removePlayer = (index) => {\n    const newPlayers = [...playerNames];\n    newPlayers.splice(index, 1);\n    setPlayerNames(newPlayers);\n  };\n  \n  // Handle player reordering\n  const movePlayer = (index, direction) => {\n    if ((direction === 'up' && index === 0) || \n        (direction === 'down' && index === playerNames.length - 1)) {\n      return;\n    }\n    \n    const newPlayers = [...playerNames];\n    const targetIndex = direction === 'up' ? index - 1 : index + 1;\n    \n    // Swap positions\n    const temp = newPlayers[index];\n    newPlayers[index] = newPlayers[targetIndex];\n    newPlayers[targetIndex] = temp;\n    setPlayerNames(newPlayers);\n  };\n  \n  // Toggle cell state\n  const toggleCell = (rowIdx, colIdx) => {\n    const newTable = [...generatedTable];\n    newTable[rowIdx][colIdx] = newTable[rowIdx][colIdx] ? '' : 'on';\n    setGeneratedTable(newTable);\n  };\n  \n  // Clear all cells\n  const clearAllCells = () => {\n    generateEmptyTable();\n  };\n  \n  // Start/reset slider for timed cues\n  const startSlider = () => {\n    setSliderPosition(0);\n    setSliderActive(true);\n  };\n  \n  // Pause slider\n  const pauseSlider = () => {\n    setSliderActive(false);\n  };\n  \n  // Reset slider\n  const resetSlider = () => {\n    setSliderPosition(-1);\n    setSliderActive(false);\n  };\n  \n  // Check if a cell should display player cue\n  const shouldShowPlayerCue = (rowIdx, colIdx) => {\n    return cueMode === 'player' && playerCues.some(cue => cue.row === rowIdx && cue.col === colIdx);\n  };\n  \n  return (\n    <div className=\"app-container\">\n      {/* Main Container */}\n      <div className=\"main-layout\">\n        {/* Settings Panel (Left Side) */}\n        <div className={`settings-panel ${settingsCollapsed ? 'collapsed' : ''}`}>\n          {/* Collapse/Expand Toggle */}\n          <button \n            onClick={() => setSettingsCollapsed(!settingsCollapsed)}\n            className=\"toggle-button\"\n            aria-label={settingsCollapsed ? \"Expand settings\" : \"Collapse settings\"}\n          >\n            {settingsCollapsed ? '>' : '<'}\n          </button>\n          \n          {!settingsCollapsed && (\n            <div className=\"settings-content\">\n              {/* Players Management */}\n              <div className=\"settings-section\">\n                <h2 className=\"section-title\">Players</h2>\n                \n                {/* Add Players */}\n                <div className=\"control-group\">\n                  <label>Add Players</label>\n                  <div className=\"input-with-button\">\n                    <input \n                      type=\"text\" \n                      value={newPlayerInput} \n                      onChange={(e) => setNewPlayerInput(e.target.value)}\n                      placeholder=\"Names, separated by commas\"\n                      className=\"text-input\"\n                    />\n                    <button \n                      onClick={handleAddPlayers}\n                      className=\"add-button\"\n                    >\n                      Add\n                    </button>\n                  </div>\n                </div>\n                \n                {/* File Upload */}\n                <div className=\"control-group\">\n                  <label>Player Names File</label>\n                  <div className=\"button-group\">\n                    <input \n                      type=\"file\" \n                      accept=\".txt\" \n                      onChange={handleFileUpload} \n                      ref={fileInputRef}\n                      className=\"hidden\"\n                    />\n                    <button \n                      onClick={() => fileInputRef.current.click()}\n                      className=\"file-button\"\n                    >\n                      Open File\n                    </button>\n                    <button \n                      onClick={() => setPlayerNames([])}\n                      className=\"clear-button\"\n                    >\n                      Clear All\n                    </button>\n                  </div>\n                </div>\n                \n                {/* Player List */}\n                <div className=\"control-group\">\n                  <label>Current Players</label>\n                  <div className=\"player-list-container\">\n                    {playerNames.length === 0 ? (\n                      <div className=\"no-players\">No players added</div>\n                    ) : (\n                      <ul className=\"player-list\">\n                        {playerNames.map((name, index) => (\n                          <li key={index} className=\"player-item\">\n                            <span className=\"player-name\">{name}</span>\n                            <div className=\"player-controls\">\n                              <button \n                                onClick={() => movePlayer(index, 'up')}\n                                disabled={index === 0}\n                                className={`move-button ${index === 0 ? 'disabled' : ''}`}\n                                aria-label=\"Move player up\"\n                              >\n                                ↑\n                              </button>\n                              <button \n                                onClick={() => movePlayer(index, 'down')}\n                                disabled={index === playerNames.length - 1}\n                                className={`move-button ${index === playerNames.length - 1 ? 'disabled' : ''}`}\n                                aria-label=\"Move player down\"\n                              >\n                                ↓\n                              </button>\n                              <button \n                                onClick={() => removePlayer(index)}\n                                className=\"remove-button\"\n                                aria-label=\"Remove player\"\n                              >\n                                ×\n                              </button>\n                            </div>\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Table Configuration */}\n              <div className=\"settings-section\">\n                <h2 className=\"section-title\">Table Settings</h2>\n                \n                <div className=\"grid-2-col\">\n                  <div className=\"control-group\">\n                    <label>Number of Columns</label>\n                    <input \n                      type=\"number\" \n                      min=\"1\" \n                      max=\"20\" \n                      value={columns} \n                      onChange={(e) => setColumns(parseInt(e.target.value) || 1)}\n                      className=\"number-input\"\n                    />\n                  </div>\n                  \n                  <div className=\"control-group\">\n                    <label>Min Players per Column</label>\n                    <input \n                      type=\"number\" \n                      min=\"0\" \n                      max={playerNames.length} \n                      value={minPlayers} \n                      onChange={(e) => setMinPlayers(parseInt(e.target.value) || 0)}\n                      className=\"number-input\"\n                    />\n                  </div>\n                  \n                  <div className=\"control-group\">\n                    <label>Max Additional Players</label>\n                    <input \n                      type=\"number\" \n                      min=\"0\" \n                      max={playerNames.length} \n                      value={maxAdditionalPlayers} \n                      onChange={(e) => setMaxAdditionalPlayers(parseInt(e.target.value) || 0)}\n                      className=\"number-input\"\n                    />\n                  </div>\n                  \n                  <div className=\"control-group button-bottom\">\n                    <button \n                      onClick={fillTable}\n                      className=\"fill-button\"\n                    >\n                      Fill Table\n                    </button>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Timing Cues Controls */}\n              <div className=\"settings-section\">\n                <h2 className=\"section-title\">Timing Cues</h2>\n                \n                <div className=\"cue-mode-selector\">\n                  <button \n                    onClick={() => setCueMode('none')}\n                    className={`toggle-button ${cueMode === 'none' ? 'active' : ''}`}\n                  >\n                    No cues\n                  </button>\n                  <button \n                    onClick={() => setCueMode('player')}\n                    className={`toggle-button ${cueMode === 'player' ? 'active' : ''}`}\n                  >\n                    Player cues\n                  </button>\n                  <button \n                    onClick={() => setCueMode('timed')}\n                    className={`toggle-button ${cueMode === 'timed' ? 'active' : ''}`}\n                  >\n                    Timed cues\n                  </button>\n                </div>\n                \n                {cueMode === 'timed' && (\n                  <>\n                    <div className=\"control-group mt-10\">\n                      <label>Piece duration (seconds)</label>\n                      <input \n                        type=\"number\" \n                        min=\"1\" \n                        value={sliderDuration} \n                        onChange={(e) => setSliderDuration(parseInt(e.target.value) || 30)}\n                        className=\"number-input\"\n                      />\n                    </div>\n                    \n                    <div className=\"button-group mt-10\">\n                      <button \n                        onClick={startSlider} \n                        className=\"start-button\"\n                      >\n                        Start\n                      </button>\n                      <button \n                        onClick={pauseSlider}\n                        className=\"pause-button\"\n                      >\n                        Pause\n                      </button>\n                      <button \n                        onClick={resetSlider}\n                        className=\"reset-button\"\n                      >\n                        Reset\n                      </button>\n                    </div>\n                  </>\n                )}\n              </div>\n              \n              {/* Cell Options */}\n              <div className=\"settings-section\">\n                <h2 className=\"section-title\">Cell Mode</h2>\n                <div className=\"button-bar\">\n                  <button \n                    onClick={() => setCellMode('none')}\n                    className={`toggle-button ${cellMode === 'none' ? 'active' : ''}`}\n                  >\n                    None\n                  </button>\n                  <button \n                    onClick={() => setCellMode('cell')}\n                    className={`toggle-button ${cellMode === 'cell' ? 'active' : ''}`}\n                  >\n                    Cell\n                  </button>\n                  <button \n                    onClick={clearAllCells}\n                    className=\"clear-button\"\n                  >\n                    Clear All\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Main Table Display (Right Side) */}\n        <div className={`table-container ${settingsCollapsed ? 'full-width' : ''}`}>\n          <h1 className=\"main-title\">OpenGrid</h1>\n          \n          <div className=\"table-wrapper\">\n            <table className=\"main-table\">\n              <thead>\n                <tr>\n                  <th className=\"player-header\">Players</th>\n                  {Array.from({ length: columns }, (_, i) => (\n                    <th key={i} className=\"column-header\">\n                      {i + 1}\n                    </th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {playerNames.map((name, rowIdx) => (\n                  <tr key={rowIdx}>\n                    <td className=\"player-cell\">\n                      {name}\n                    </td>\n                    {Array.from({ length: columns }, (_, colIdx) => (\n                      <td \n                        key={colIdx} \n                        className={`\n                          grid-cell \n                          ${colIdx === sliderPosition && cueMode === 'timed' ? 'active-column' : ''}\n                          ${shouldShowPlayerCue(rowIdx, colIdx) ? 'player-cue' : ''}\n                        `}\n                        onClick={() => cellMode === 'cell' ? toggleCell(rowIdx, colIdx) : null}\n                      >\n                        {generatedTable[rowIdx]?.[colIdx] && (\n                          <div className=\"player-on\"></div>\n                        )}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}