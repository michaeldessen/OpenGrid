{"version":3,"sources":["OpenGrid.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["OpenGrid","playerNames","setPlayerNames","useState","newPlayerInput","setNewPlayerInput","columns","setColumns","minPlayers","setMinPlayers","maxAdditionalPlayers","setMaxAdditionalPlayers","sliderActive","setSliderActive","durationMinutes","setDurationMinutes","durationSeconds","setDurationSeconds","totalDurationSeconds","setTotalDurationSeconds","generatedTable","setGeneratedTable","settingsCollapsed","setSettingsCollapsed","cueMode","setCueMode","playerCues","setPlayerCues","progressBarPosition","setProgressBarPosition","pacingMode","setPacingMode","columnDurations","setColumnDurations","sliderCompleted","setSliderCompleted","sliderInterval","useRef","fileInputRef","generateEmptyTable","useCallback","newTable","map","name","Array","fill","generateColumnDurations","totalDuration","columnCount","evenDuration","durations","remainingDuration","i","duration","Math","random","push","getCumulativeDurations","cumulative","sum","length","calculatePlayerCues","cues","col","colChanges","row","randomIndex","floor","movePlayer","index","direction","newPlayers","targetIndex","temp","shouldShowPlayerCue","rowIdx","colIdx","some","cue","useEffect","startTime","Date","now","cumulativeDurations","current","setInterval","elapsedTime","clearInterval","currentColumn","columnStartTime","columnDuration","React","createElement","className","onClick","aria-label","type","value","onChange","e","target","placeholder","handleAddPlayers","trim","split","filter","accept","file","files","reader","FileReader","onload","names","result","readAsText","ref","click","key","disabled","splice","removePlayer","min","max","parseInt","fillTable","playerCellCounts","additionalPlayers","totalPlayers","playerIndices","from","_","sort","a","b","playerIdx","clearAllCells","Fragment","mins","secs","total","_generatedTable$rowId","adjustedColIdx","toggleCell","startSlider","pauseSlider","resetSlider","style","width","transition","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1d411be3.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './OpenGrid.css';\n\nexport default function OpenGrid() {\n  // State variables\n  const [playerNames, setPlayerNames] = useState(['Lisa', 'Rebecca', 'Michael', 'Willie', 'Shivangi', 'Chieh']);\n  const [newPlayerInput, setNewPlayerInput] = useState('');\n  const [columns, setColumns] = useState(8);\n  const [minPlayers, setMinPlayers] = useState(1);\n  const [maxAdditionalPlayers, setMaxAdditionalPlayers] = useState(1);\n  const [sliderActive, setSliderActive] = useState(false);\n  const [durationMinutes, setDurationMinutes] = useState(0);\n  const [durationSeconds, setDurationSeconds] = useState(30);\n  const [totalDurationSeconds, setTotalDurationSeconds] = useState(30);\n  const [generatedTable, setGeneratedTable] = useState([]);\n  const [settingsCollapsed, setSettingsCollapsed] = useState(false);\n  const [cueMode, setCueMode] = useState('none'); // 'none', 'player', or 'timed'\n  const [playerCues, setPlayerCues] = useState([]);\n  const [progressBarPosition, setProgressBarPosition] = useState(0);\n  const [pacingMode, setPacingMode] = useState('even'); // 'even' or 'uneven'\n  const [columnDurations, setColumnDurations] = useState([]);\n  const [sliderCompleted, setSliderCompleted] = useState(false);\n  \n  const sliderInterval = useRef(null);\n  const fileInputRef = useRef(null);\n\n  // Generate empty table\n  const generateEmptyTable = useCallback(() => {\n    const newTable = playerNames.map(name => Array(columns).fill(''));\n    setGeneratedTable(newTable);\n  }, [playerNames, columns]);\n\n  // Generate column durations based on pacing mode\n  const generateColumnDurations = useCallback(() => {\n    if (columns <= 1) return;\n    \n    const totalDuration = totalDurationSeconds;\n    const columnCount = columns - 1; // Exclude player column\n    \n    if (pacingMode === 'even') {\n      // Even distribution\n      const evenDuration = totalDuration / columnCount;\n      setColumnDurations(Array(columnCount).fill(evenDuration));\n    } else {\n      // Uneven distribution\n      const durations = [];\n      let remainingDuration = totalDuration;\n      \n      for (let i = 0; i < columnCount - 1; i++) {\n        // Random duration between 0.2 and 2 times the average duration\n        const avgDuration = remainingDuration / (columnCount - i);\n        const duration = avgDuration * (0.2 + Math.random() * 1.8);\n        durations.push(duration);\n        remainingDuration -= duration;\n      }\n      \n      // Add the remaining duration to the last column\n      durations.push(remainingDuration);\n      \n      setColumnDurations(durations);\n    }\n}, [columns, totalDurationSeconds, pacingMode]);\n\n  // Get cumulative duration at each column\n  const getCumulativeDurations = useCallback(() => {\n    const cumulative = [0]; // Start with 0\n    let sum = 0;\n    for (let i = 0; i < columnDurations.length; i++) {\n      sum += columnDurations[i];\n      cumulative.push(sum);\n    }\n    return cumulative;\n  }, [columnDurations]);\n\n  // Calculate which cells should have player cues\n  const calculatePlayerCues = useCallback(() => {\n    const cues = [];\n    \n    // Start from the second column (index 1)\n    for (let col = 1; col < columns; col++) {\n      const colChanges = [];\n      \n      for (let row = 0; row < playerNames.length; row++) {\n        const currentState = generatedTable[row][col] ? true : false;\n        const previousState = generatedTable[row][col-1] ? true : false;\n        \n        // If player state changed (on to off, or off to on)\n        if (currentState !== previousState) {\n          colChanges.push(row);\n        }\n      }\n      \n      // If there are changes, select one player to be the cue\n      if (colChanges.length > 0) {\n        // Randomly select one player who changed state\n        const randomIndex = Math.floor(Math.random() * colChanges.length);\n        cues.push({ col, row: colChanges[randomIndex] });\n      }\n    }\n    \n    setPlayerCues(cues);\n  }, [columns, playerNames, generatedTable]);\n\n  // Fill table with on/off states fairly distributed among players\n  const fillTable = () => {\n    const newTable = [...generatedTable];\n    \n    // Track how many active cells each player has\n    const playerCellCounts = Array(playerNames.length).fill(0);\n    \n    // Start from column 1 (index 1), skipping the first column\n    for (let col = 1; col < columns; col++) {\n      // Calculate how many players to assign in this column\n      const additionalPlayers = Math.floor(Math.random() * (maxAdditionalPlayers + 1));\n      const totalPlayers = Math.min(minPlayers + additionalPlayers, playerNames.length);\n      \n      // Sort players by number of active cells (ascending) to prioritize players with fewer active states\n      const playerIndices = Array.from({ length: playerNames.length }, (_, i) => i)\n        .sort((a, b) => playerCellCounts[a] - playerCellCounts[b]);\n      \n      // Clear column first\n      for (let row = 0; row < playerNames.length; row++) {\n        newTable[row][col] = '';\n      }\n      \n      // Assign active states to selected players (prioritizing those with fewer active states)\n      for (let i = 0; i < totalPlayers; i++) {\n        const playerIdx = playerIndices[i];\n        newTable[playerIdx][col] = 'on';\n        playerCellCounts[playerIdx]++;\n      }\n    }\n    \n    setGeneratedTable(newTable);\n  };\n\n  // Handle player names from file\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const text = e.target.result;\n      const names = text.split(/[\\n,]/) // Split by newline or comma\n        .map(name => name.trim())\n        .filter(name => name.length > 0);\n      \n      if (names.length > 0) {\n        setPlayerNames(names);\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  // Handle manually adding players\n  const handleAddPlayers = () => {\n    if (!newPlayerInput.trim()) return;\n    \n    const newPlayers = newPlayerInput\n      .split(',')\n      .map(name => name.trim())\n      .filter(name => name);\n    \n    if (newPlayers.length > 0) {\n      setPlayerNames([...playerNames, ...newPlayers]);\n      setNewPlayerInput('');\n    }\n  };\n\n  // Handle removing a player\n  const removePlayer = (index) => {\n    const newPlayers = [...playerNames];\n    newPlayers.splice(index, 1);\n    setPlayerNames(newPlayers);\n  };\n\n  // Handle player reordering\n  const movePlayer = (index, direction) => {\n    if ((direction === 'up' && index === 0) || \n        (direction === 'down' && index === playerNames.length - 1)) {\n      return;\n    }\n    \n    const newPlayers = [...playerNames];\n    const targetIndex = direction === 'up' ? index - 1 : index + 1;\n    \n    // Swap positions\n    const temp = newPlayers[index];\n    newPlayers[index] = newPlayers[targetIndex];\n    newPlayers[targetIndex] = temp;\n    setPlayerNames(newPlayers);\n  };\n\n  // Toggle cell state\n  const toggleCell = (rowIdx, colIdx) => {\n    const newTable = [...generatedTable];\n    newTable[rowIdx][colIdx] = newTable[rowIdx][colIdx] ? '' : 'on';\n    setGeneratedTable(newTable);\n  };\n\n  // Clear all cells\n  const clearAllCells = () => {\n    generateEmptyTable();\n  };\n\n  // Start/reset slider for timed cues\n  const startSlider = () => {\n    setProgressBarPosition(0);\n    setSliderActive(true);\n    setSliderCompleted(false);  // Reset this when starting the slider\n    generateColumnDurations();\n  };\n\n  // Pause slider\n  const pauseSlider = () => {\n    setSliderActive(false);\n  };\n\n  // Reset slider\n  const resetSlider = () => {\n    setProgressBarPosition(0);\n    setSliderActive(false);\n    setSliderCompleted(false);  // Reset this when resetting the slider\n  };\n\n  // Check if a cell should display player cue\n  const shouldShowPlayerCue = (rowIdx, colIdx) => {\n    return cueMode === 'player' && playerCues.some(cue => cue.row === rowIdx && cue.col === colIdx);\n  };\n\n  // Initialize table on first load\n  useEffect(() => {\n    generateEmptyTable();\n    generateColumnDurations();\n }, [playerNames, columns, pacingMode, totalDurationSeconds, generateEmptyTable, generateColumnDurations]);\n\n  // Slider animation for timed cues\n  useEffect(() => {\n    if (sliderActive && cueMode === 'timed') {\n      const startTime = Date.now();\n      const cumulativeDurations = getCumulativeDurations();\n      \n      sliderInterval.current = setInterval(() => {\n        const elapsedTime = (Date.now() - startTime) / 1000;\n        \n        if (elapsedTime >= totalDurationSeconds) {\n  setProgressBarPosition(100);\n  setSliderActive(false);\n  setSliderCompleted(true);\n  clearInterval(sliderInterval.current);\n  return;\n}\n        \n        // Find the current column based on elapsed time\n        let currentColumn = 0;\n        while (currentColumn < cumulativeDurations.length - 1 && \n               elapsedTime > cumulativeDurations[currentColumn + 1]) {\n          currentColumn++;\n        }\n        \n        // Calculate progress within the current column\n        const columnStartTime = cumulativeDurations[currentColumn];\n        const columnDuration = columnDurations[currentColumn];\n        const columnProgress = (elapsedTime - columnStartTime) / columnDuration;\n        \n        // Calculate overall progress\n        const overallProgress = (currentColumn + columnProgress) / (columns - 1);\n        setProgressBarPosition(overallProgress * 100);\n        \n      }, 33); // ~30 fps update\n    } else if (!sliderActive && sliderInterval.current) {\n      clearInterval(sliderInterval.current);\n    }\n    \n    return () => {\n      if (sliderInterval.current) clearInterval(sliderInterval.current);\n    };\n  }, [sliderActive, cueMode, totalDurationSeconds, columnDurations, columns, getCumulativeDurations]);\n\n  // Update player cues when table changes\n  useEffect(() => {\n    if (cueMode === 'player') {\n      calculatePlayerCues();\n    } else {\n      setPlayerCues([]);\n    }\n  }, [generatedTable, cueMode, calculatePlayerCues]);\n\n  return (\n    <div className=\"app-container\">\n      {/* Main Container */}\n      <div className=\"main-layout\">\n        {/* Settings Panel (Left Side) */}\n        <div className={`settings-panel ${settingsCollapsed ? 'collapsed' : ''}`}>\n          {/* Collapse/Expand Toggle */}\n          <button \n            onClick={() => setSettingsCollapsed(!settingsCollapsed)}\n            className=\"collapse-toggle-button\"\n            aria-label={settingsCollapsed ? \"Expand settings\" : \"Collapse settings\"}\n          >\n            {settingsCollapsed ? '>' : '<'}\n          </button>\n          \n          {!settingsCollapsed && (\n            <div className=\"settings-content\">\n              {/* Players Management */}\n              <div className=\"settings-section\">\n                <h2 className=\"section-title\">Players</h2>\n                \n                {/* Add Players */}\n                <div className=\"control-group\">\n                  <label>Add Players</label>\n                  <div className=\"input-with-button\">\n                    <input \n                      type=\"text\" \n                      value={newPlayerInput} \n                      onChange={(e) => setNewPlayerInput(e.target.value)}\n                      placeholder=\"Names, separated by commas\"\n                      className=\"text-input\"\n                    />\n                    <button \n                      onClick={handleAddPlayers}\n                      className=\"add-button\"\n                    >\n                      Add\n                    </button>\n                  </div>\n                </div>\n                \n                {/* File Upload */}\n                <div className=\"control-group\">\n                  <label>Player Names File</label>\n                  <div className=\"button-group\">\n                    <input \n                      type=\"file\" \n                      accept=\".txt,.csv\" \n                      onChange={handleFileUpload} \n                      ref={fileInputRef}\n                      className=\"hidden\"\n                    />\n                    <button \n                      onClick={() => fileInputRef.current.click()}\n                      className=\"file-button\"\n                    >\n                      Open File\n                    </button>\n                    <button \n                      onClick={() => setPlayerNames([])}\n                      className=\"clear-button\"\n                    >\n                      Clear All\n                    </button>\n                  </div>\n                </div>\n                \n                {/* Player List */}\n                <div className=\"control-group\">\n                  <label>Current Players</label>\n                  <div className=\"player-list-container\">\n                    {playerNames.length === 0 ? (\n                      <div className=\"no-players\">No players added</div>\n                    ) : (\n                      <ul className=\"player-list\">\n                        {playerNames.map((name, index) => (\n                          <li key={index} className=\"player-item\">\n                            <span className=\"player-name\">{name}</span>\n                            <div className=\"player-controls\">\n                              <button \n                                onClick={() => movePlayer(index, 'up')}\n                                disabled={index === 0}\n                                className={`move-button ${index === 0 ? 'disabled' : ''}`}\n                                aria-label=\"Move player up\"\n                              >\n                                ↑\n                              </button>\n                              <button \n                                onClick={() => movePlayer(index, 'down')}\n                                disabled={index === playerNames.length - 1}\n                                className={`move-button ${index === playerNames.length - 1 ? 'disabled' : ''}`}\n                                aria-label=\"Move player down\"\n                              >\n                                ↓\n                              </button>\n                              <button \n                                onClick={() => removePlayer(index)}\n                                className=\"remove-button\"\n                                aria-label=\"Remove player\"\n                              >\n                                ×\n                              </button>\n                            </div>\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Table Configuration */}\n              <div className=\"settings-section\">\n                <h2 className=\"section-title\">Table</h2>\n                \n                <div className=\"table-controls-row\">\n                  <div className=\"control-group\">\n                    <label>Columns</label>\n                    <input \n                      type=\"number\" \n                      min=\"1\" \n                      max=\"20\" \n                      value={columns} \n                      onChange={(e) => setColumns(parseInt(e.target.value) || 1)}\n                      className=\"number-input\"\n                    />\n                  </div>\n                  \n                  <div className=\"control-group\">\n                    <label>Min Players</label>\n                    <input \n                      type=\"number\" \n                      min=\"0\" \n                      max={playerNames.length} \n                      value={minPlayers} \n                      onChange={(e) => setMinPlayers(parseInt(e.target.value) || 0)}\n                      className=\"number-input\"\n                    />\n                  </div>\n                  \n                  <div className=\"control-group\">\n                    <label>Max Additional</label>\n                    <input \n                      type=\"number\" \n                      min=\"0\" \n                      max={playerNames.length} \n                      value={maxAdditionalPlayers} \n                      onChange={(e) => setMaxAdditionalPlayers(parseInt(e.target.value) || 0)}\n                      className=\"number-input\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"table-buttons-row\">\n                  <button \n                    onClick={fillTable}\n                    className=\"fill-button\"\n                  >\n                    Fill Table\n                  </button>\n                  <button \n                    onClick={clearAllCells}\n                    className=\"clear-button\"\n                  >\n                    Clear Table\n                  </button>\n                </div>\n              </div>\n              \n              {/* Timing Cues Controls */}\n              <div className=\"settings-section\">\n                <h2 className=\"section-title\">Timing</h2>\n                \n                <div className=\"cue-mode-selector\">\n                  <button \n                    onClick={() => setCueMode('none')}\n                    className={`cue-toggle-button ${cueMode === 'none' ? 'active' : ''}`}\n                  >\n                    No cues\n                  </button>\n                  <button \n                    onClick={() => setCueMode('player')}\n                    className={`cue-toggle-button ${cueMode === 'player' ? 'active' : ''}`}\n                  >\n                    Player cues\n                  </button>\n                  <button \n                    onClick={() => setCueMode('timed')}\n                    className={`cue-toggle-button ${cueMode === 'timed' ? 'active' : ''}`}\n                  >\n                    Timed cues\n                  </button>\n                </div>\n                \n                {cueMode === 'timed' && (\n                  <>\n                    <div className=\"control-group mt-10\">\n                      <div className=\"settings-row\">\n                        <div>\n  <label>Piece duration</label>\n  <div className=\"time-input-container\">\n    <input \n      type=\"number\" \n      min=\"0\" \n      max=\"90\"\n      value={durationMinutes} \n      onChange={(e) => {\n        const mins = Math.min(90, Math.max(0, parseInt(e.target.value) || 0));\n        setDurationMinutes(mins);\n        setTotalDurationSeconds(mins * 60 + durationSeconds);\n      }}\n      className=\"time-input\"\n    />\n    <span className=\"time-label\">min</span>\n    <input \n      type=\"number\" \n      min=\"0\" \n      max=\"59\"\n      value={durationSeconds} \n      onChange={(e) => {\n        const secs = Math.min(59, Math.max(0, parseInt(e.target.value) || 0));\n        setDurationSeconds(secs);\n        setTotalDurationSeconds(durationMinutes * 60 + secs);\n      }}\n      className=\"time-input\"\n    />\n    <span className=\"time-label\">sec</span>\n  </div>\n  <input\n    type=\"range\"\n    min=\"30\"\n    max=\"5400\"\n    value={totalDurationSeconds}\n    onChange={(e) => {\n      const total = parseInt(e.target.value);\n      setTotalDurationSeconds(total);\n      setDurationMinutes(Math.floor(total / 60));\n      setDurationSeconds(total % 60);\n    }}\n    className=\"time-slider\"\n  />\n</div>\n                        \n                        <div className=\"pacing-controls\">\n                          <label>Pacing</label>\n                          <div className=\"button-group\">\n                            <button \n                              onClick={() => setPacingMode('even')}\n                              className={`pacing-button ${pacingMode === 'even' ? 'active' : ''}`}\n                            >\n                              Even\n                            </button>\n                            <button \n                              onClick={() => setPacingMode('uneven')}\n                              className={`pacing-button ${pacingMode === 'uneven' ? 'active' : ''}`}\n                            >\n                              Uneven\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                  </>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Main Table Display (Right Side) */}\n        <div className={`table-container ${settingsCollapsed ? 'full-width' : ''}`}>\n          <div className=\"table-wrapper\">\n            <table className=\"main-table\">\n              <thead>\n                <tr>\n                  <th className=\"player-header\">Players</th>\n                  {Array.from({ length: columns - 1 }, (_, i) => (\n                    <th key={i} className=\"column-header\">\n                      {i + 1}\n                    </th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {playerNames.map((name, rowIdx) => (\n                  <tr key={rowIdx}>\n                    <td className=\"player-cell\">\n                      {name}\n                    </td>\n                    {Array.from({ length: columns - 1 }, (_, colIdx) => {\n                      const adjustedColIdx = colIdx + 1; // Skip player column in data array\n                      return (\n                        <td \n                          key={colIdx} \n                          className={`\n                             grid-cell \n                             ${shouldShowPlayerCue(rowIdx, adjustedColIdx) ? 'player-cue' : ''}\n                          `}\n                          onClick={() => toggleCell(rowIdx, adjustedColIdx)}\n                        >\n                          {generatedTable[rowIdx]?.[adjustedColIdx] && (\n                            <div className=\"player-on\"></div>\n                          )}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            \n            {/* Progress bar with controls */}\n{cueMode === 'timed' && (\n  <div className=\"progress-wrapper\">\n    <div className=\"progress-controls\">\n      <button \n        onClick={startSlider} \n        className=\"icon-button play-icon-button\"\n        aria-label=\"Start\"\n      >\n        <div className=\"icon-play\"></div>\n      </button>\n      <div className=\"button-group\">\n        <button \n          onClick={pauseSlider}\n          className=\"icon-button pause-icon-button\"\n          aria-label=\"Pause\"\n        >\n          <div className=\"icon-pause\">\n            <div className=\"icon-pause-bar\"></div>\n            <div className=\"icon-pause-bar\"></div>\n          </div>\n        </button>\n        <button \n          onClick={resetSlider}\n          className=\"icon-button reset-icon-button\"\n          aria-label=\"Reset\"\n        >\n          ↺\n        </button>\n      </div>\n    </div>\n    <div className=\"progress-container\">\n      <div \n        className=\"progress-bar\"\n        style={{\n          width: `${progressBarPosition}%`,\n          transition: 'width 0.1s linear'\n        }}\n      />\n    </div>\n  </div>\n)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport OpenGrid from './OpenGrid';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <OpenGrid />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}